% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/with_ch3_table.R
\name{with_ch3_table}
\alias{with_ch3_table}
\title{Execute an Expression on a DuckDB Table with Optional Materialization}
\usage{
with_ch3_table(
  ch3_db,
  table_name,
  expr,
  mode = c("collect", "compute"),
  output_table = NULL
)
}
\arguments{
\item{ch3_db}{Path to the DuckDB database file (e.g., `"my_data.ch3.db"`).}

\item{table_name}{Name of the table in the database to operate on.}

\item{expr}{A function taking one argument (`tbl_ref`) and returning a lazy `dplyr` expression.
The table reference (`tbl_ref`) will be passed as a `tbl()` object connected to the database.}

\item{mode}{One of `"collect"` (default) or `"compute"`. If `"collect"`, the result is returned as
a data frame in R. If `"compute"`, the result is stored as a new table in the database.}

\item{output_table}{Required if `mode = "compute"`. Name of the output table to create or overwrite
with the result of `expr(tbl_ref)`.}
}
\value{
If `mode = "collect"`, returns a data frame. If `mode = "compute"`, returns `NULL` invisibly.
}
\description{
Connects to a DuckDB database, evaluates a user-supplied expression on a specified table,
and either collects the result into R or computes and stores it as a new table in the database.
}
\examples{
\dontrun{
# Collect results of a filtered table into R
with_ch3_table(
  ch3_db = "my_data.ch3.db",
  table_name = "methylation_data",
  expr = function(tbl_ref) dplyr::filter(tbl_ref, score > 0.5),
  mode = "collect"
)

# Store the filtered result in a new table inside the database
with_ch3_table(
  ch3_db = "my_data.ch3.db",
  table_name = "methylation_data",
  expr = function(tbl_ref) dplyr::filter(tbl_ref, score > 0.5),
  mode = "compute",
  output_table = "filtered_data"
)
}

}
